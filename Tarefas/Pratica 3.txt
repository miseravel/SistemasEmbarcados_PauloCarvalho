Data: 14/03/2017

Para todas as questões, compile-as com o gcc e execute-as via terminal.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

1. Crie um "Olá mundo!" em C.

Resposta:

//Imprime Ola Mundo na tela.

#include <stdio.h>

int main()
{
	printf("Olá Mundo \n");
	return 0;
}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

2. Crie um código em C que pergunta ao usuário o seu nome, e imprime no terminal "Ola " e o nome do usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_1':
	$ ./ola_usuario_1
	$ Digite o seu nome: Eu
	$ Ola Eu
	$

	Resposta:

	//Requisita o nome do usuário e faz uma saudação.

	#include <stdio.h>

	int main()

	{

		char p[100];
		printf("Digite seu nome: \n");
		scanf("%s", p);
		printf("Ola %s \n", p);
		return 0;
	}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

3. Apresente os comportamentos do código anterior nos seguintes casos:
	(a) Se o usuário insere mais de um nome.
		$ ./ola_usuario_1 Eu Mesmo

		Resposta: Apenas o primeiro nome digitado é impresso.

	(b) Se o usuário insere mais de um nome entre aspas duplas. Por exemplo:
		$ ./ola_usuario_1 "Eu Mesmo"

		Resposta: Apenas o primeiro nome digitado é impressoa companhado do primeiro par de aspas.

	(c) Se é usado um pipe. Por exemplo:
		$ echo Eu | ./ola_usuario_1

  	Resposta: O nome é impresso antes mesmo de ser digitado.

	(d) Se é usado um pipe com mais de um nome. Por exemplo:
		$ echo Eu Mesmo | ./ola_usuario_1

		Resposta: O nome é impresso antes mesmo de ser digitado, mas apenas o primeiro nome.

	(e) Se é usado um pipe com mais de um nome entre aspas duplas. Por exemplo:
		$ echo "Eu Mesmo" | ./ola_usuario_1

		Resposta: O nome é impresso antes mesmo de ser digitado, mas apenas o primeiro nome.

	(f) Se é usado o redirecionamento de arquivo. Por exemplo:
		$ echo Ola mundo cruel! > ola.txt
		$ ./ola_usuario_1 < ola.txt

		Resposta: Apenas o primeiro nome digitado é impresso.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

4. Crie um código em C que recebe o nome do usuário como um argumento de entrada (usando as variáveis argc e *argv[]), e imprime no terminal "Ola " e o nome do usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_2':
	$ ./ola_usuario_2 Eu
	$ Ola Eu
	$

	Resposta:

	//pelo argumento faz uma saudação.

	#include <stdio.h>

	int main(int argc, char*argv[	])

	{
		printf("Ola %s \n", argv[1]);
		return 0;
	}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

5. Apresente os comportamentos do código anterior nos seguintes casos:

	(a) Se o usuário insere mais de um nome.
		$ ./ola_usuario_2 Eu Mesmo

		Resposta: Apenas o primeiro nome digitado é impresso.

	(b) Se o usuário insere mais de um nome entre aspas duplas. Por exemplo:
		$ ./ola_usuario_2 "Eu Mesmo"

		Resposta: Os dois nomes são impressos.

	(c) Se é usado um pipe. Por exemplo:
		$ echo Eu | ./ola_usuario_2

		Resposta: Nenhum nome é impresso.

	(d) Se é usado um pipe com mais de um nome. Por exemplo:
		$ echo Eu Mesmo | ./ola_usuario_2

		Resposta:	Nenhum nome é impresso.

	(e) Se é usado um pipe com mais de um nome entre aspas duplas. Por exemplo:
		$ echo "Eu Mesmo" | ./ola_usuario_2

		Resposta: Nenhum nome é impresso.

	(f) Se é usado o redirecionamento de arquivo. Por exemplo:
		$ echo Ola mundo cruel! > ola.txt
		$ ./ola_usuario_2 < ola.txt

		Resposta: Nenhum nome é impresso.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

6. Crie um código em C que faz o mesmo que o código da questão 4, e em seguida imprime no terminal quantos valores de entrada foram fornecidos pelo usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_3':
	$ ./ola_usuario_3 Eu
	$ Ola Eu
	$ Numero de entradas = 2
	$

	Resposta:

	//usa o argumento para fazer uma saudação e na sequencia indica numero de entradas.

	#include <stdio.h>

	int main(int argc, char*argv[	])

	{
		printf("Ola %s \n", argv[1]);
		printf("Numero de entradas = %d \n", argc);
		return 0;
	}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

7. Crie um código em C que imprime todos os argumentos de entrada fornecidos pelo usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_argumentos':
	$ ./ola_argumentos Eu Mesmo e Minha Pessoa
	$ Argumentos: Eu Mesmo e Minha Pessoa
	$

	Resposta:

	//apresenta os argumentos digitados.

	#include <stdio.h>

	int main(int argc, char*argv[	])

	{
		int i;
		printf("Argumentos:");
		for (i=1; i<argc; i++){

		printf(" %s", argv[i]);
		}
		printf("\n");
		return 0;
	}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

8. Crie uma função que retorna a quantidade de caracteres em uma string, usando o seguinte protótipo:

	int Num_Caracs(char *string);

Salve-a em um arquivo separado chamado 'num_caracs.c'. Salve o protótipo em um arquivo chamado 'num_caracs.h'. Compile 'num_caracs.c' para gerar o objeto 'num_caracs.o'.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

9. Re-utilize o objeto criado na questão 8 para criar um código que imprime cada argumento de entrada e a quantidade de caracteres de cada um desses argumentos. Por exemplo, considerando que o código criado recebeu o nome de 'ola_num_caracs_1':
	$ ./ola_num_caracs_1 Eu Mesmo
	$ Argumento: ./ola_num_caracs_1 / Numero de caracteres: 18
	$ Argumento: Eu / Numero de caracteres: 2
	$ Argumento: Mesmo / Numero de caracteres: 5
	$

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

10. Crie um Makefile para a questão anterior.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

11. Re-utilize o objeto criado na questão 8 para criar um código que imprime o total de caracteres nos argumentos de entrada. Por exemplo, considerando que o código criado recebeu o nome de 'ola_num_caracs_2':
	$ ./ola_num_caracs_2 Eu Mesmo
	$ Total de caracteres de entrada: 25
	$

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

12. Crie um Makefile para a questão anterior.
